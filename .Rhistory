#This line creates a new data frame called rain.df that takes in the data from the "rnf6080.dat" file.
rain.df <- read.table("rnf6080.dat")
#The function dim tells you how many rows and columns you have, we use it on the rain.df data frame to see its size.
dim(rain.df)
#The names function tells you have the names of a column of a data frame.
names(rain.df)
#Calling the name of a data frame with the indices you are interested in will display that entry:
rain.df[5,7]
#If you are interested in an entire row of a data frame, just leave the column index blank:
rain.df[2, ]
names(rain.df) <- c("year","month","day",seq(0,23))
#This bit of code gives names to the columns, making it clear that the first three columns give the date of the measurement taken. The next 24 columns tell you the amount of rainfall in each of those hours.
#We load the dplyr library to use some of its functions for data manipulation.
library(dplyr)
#The mutate function adds a new column from some function of the existing data, it's used to calculate the sum of the hourly rainfall to get a daily rainfall value.
rain.df.daily <- mutate(rain.df, daily = rowSums(rain.df[,4:27]))
#Then a histogram is made of the daily rain values.
hist(rain.df.daily$daily)
#There are large negative numbers in the histogram, which obviously does not make sense for daily rainfall.
#Some of the data entries are -999, which means that the data was not acquired for some reason - these will be changed to NAs.
rain.df.daily[rain.df.daily < 0] = NA
rain.df.fixed <- rain.df.daily
#Now we reproduce the histogram.
hist(rain.df.fixed$daily)
#This histogram makes more since, most of the days have little or no rainfall, with some days having larger amounts of rain.
library(nycflights13)
library(dplyr)
library(ggplot2)
flights
#My birthday is April 4th, so I filter for that date in the flights tbl.
filter(flights, month == 4 & day == 4)
#We don't need to use the dplyr function filter to select a set of rows.
flights[567:589, ]
#This uses the dplyr function arrange to sort the data by year, month and day.
arrange(flights, year, month, day)
#Adding desc() to the argument of arrange will sort the data in descending order (ascending is the default). The data is then sorted by arrival delay in descending order.
arrange(flights, desc(arr_delay))
#This uses the dplyr function select to take out only the columns with date information (year, month, day).
select(flights, year, month, day)
#Again, this uses the select function to take out the columns with plane information (carrier, tailnum)
select(flights, carrier, tailnum)
#The rename function can change the column named "tailnum" to "tail_num", note the new name goes first in the second argument of the function.
flights <- rename(flights, tail_num = tailnum)
#The mutate function can add new columns to a table that use data from existing columns. This can be used to add a new column "gain" which is the difference of arrival delay and departure delay.
mutate(flights, gain = arr_delay - dep_delay)
#The mutate function is used again to add a speed variable to the tbl.
mutate(flights, speed = distance/(air_time/60))
#This summary gives the average arrival delay for all flights, with NA's removed.
summarise(flights, average_delay = mean(arr_delay[!is.na(arr_delay)]))
g3 <- ggplot(data=euData, aes(x=year, y=fatalities))+
geom_line() + xlab("Year") + ylab("Fatalities")+ facet_wrap(~Country)+
ggtitle("Fatalities from terrorism, in EU countries since 1986 \n Of members who joined in 1986 or before")
